import { MigrationInterface, QueryRunner } from "typeorm";

export class AddMissingUserColumns1755184063840 implements MigrationInterface {
    name = 'AddMissingUserColumns1755184063840'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "user_profiles" DROP CONSTRAINT "FK_user_profiles_userId"`);
        await queryRunner.query(`ALTER TABLE "payment_details" DROP CONSTRAINT "FK_payment_details_userId"`);
        await queryRunner.query(`ALTER TABLE "auth_providers" DROP CONSTRAINT "FK_auth_providers_userId"`);
        await queryRunner.query(`ALTER TABLE "brands" DROP CONSTRAINT "FK_b209d7ccd90ae0ca1605794a0d5"`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" DROP CONSTRAINT "FK_9332e2b867f91fba0642b781af8"`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" DROP CONSTRAINT "FK_44503460d32a68307ec82ab6feb"`);
        await queryRunner.query(`ALTER TABLE "coin_balances" DROP CONSTRAINT "FK_41375ba3cf636acd8bfa009ba8e"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_auth_providers_provider"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_BRANDS_CATEGORY_ID"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_BRANDS_IS_ACTIVE"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_brands_category_active"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_brands_active"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_BRANDS_BRANDWISE_MAX_CAP"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_COIN_TRANSACTIONS_USER_ID"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_COIN_TRANSACTIONS_TYPE"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_COIN_TRANSACTIONS_BRAND_ID"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_COIN_TRANSACTIONS_CREATED_AT"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_COIN_TRANSACTIONS_USER_TYPE"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_coin_transactions_user_type"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_coin_transactions_user_created"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_coin_transactions_brand"`);
        await queryRunner.query(`DROP INDEX "public"."UQ_coin_transactions_user_welcome_bonus"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_COIN_TRANSACTIONS_TRANSACTION_ID"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_COIN_TRANSACTIONS_BILL_DATE"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_COIN_TRANSACTIONS_PAYMENT_PROCESSED"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_COIN_BALANCES_LAST_UPDATED"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_coin_balance_user"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_users_mobileNumber"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_users_email"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_GLOBAL_CONFIG_KEY"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_GLOBAL_CONFIG_CATEGORY"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_otps_identifier_type_status"`);
        await queryRunner.query(`COMMENT ON TABLE "user_profiles" IS NULL`);
        await queryRunner.query(`COMMENT ON TABLE "payment_details" IS NULL`);
        await queryRunner.query(`COMMENT ON TABLE "auth_providers" IS NULL`);
        await queryRunner.query(`COMMENT ON TABLE "brands" IS NULL`);
        await queryRunner.query(`COMMENT ON TABLE "coin_transactions" IS NULL`);
        await queryRunner.query(`COMMENT ON TABLE "coin_balances" IS NULL`);
        await queryRunner.query(`COMMENT ON TABLE "users" IS NULL`);
        await queryRunner.query(`COMMENT ON TABLE "global_config" IS NULL`);
        await queryRunner.query(`COMMENT ON TABLE "otps" IS NULL`);
        await queryRunner.query(`COMMENT ON TABLE "brand_categories" IS NULL`);
        await queryRunner.query(`CREATE TABLE "files" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "userId" uuid NOT NULL, "fileName" character varying(255) NOT NULL, "fileType" character varying(100) NOT NULL, "fileSize" bigint NOT NULL, "fileKey" character varying(500) NOT NULL, "fileUrl" character varying(500) NOT NULL, "status" character varying(50) NOT NULL, "errorMessage" text, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_6c16b9093a142e0e7613b04a3d9" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "notifications" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "userId" uuid NOT NULL, "type" character varying(100) NOT NULL, "title" character varying(200) NOT NULL, "message" text NOT NULL, "data" jsonb, "isRead" boolean NOT NULL DEFAULT false, "readAt" TIMESTAMP, "isPushed" boolean NOT NULL DEFAULT false, "pushedAt" TIMESTAMP, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_6a72c3c0f683f6462415e653c3a" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "IDX_21e65af2f4f242d4c85a92aff4" ON "notifications" ("userId", "createdAt") `);
        await queryRunner.query(`CREATE INDEX "IDX_5340fc241f57310d243e5ab20b" ON "notifications" ("userId", "isRead") `);
        await queryRunner.query(`ALTER TABLE "user_profiles" DROP COLUMN "address"`);
        await queryRunner.query(`ALTER TABLE "payment_details" DROP COLUMN "preferredMethod"`);
        await queryRunner.query(`DROP TYPE "public"."payment_method_enum"`);
        await queryRunner.query(`ALTER TABLE "payment_details" DROP COLUMN "cardLastFour"`);
        await queryRunner.query(`ALTER TABLE "payment_details" DROP COLUMN "cardBrand"`);
        await queryRunner.query(`ALTER TABLE "payment_details" DROP COLUMN "walletType"`);
        await queryRunner.query(`ALTER TABLE "payment_details" DROP COLUMN "isDefault"`);
        await queryRunner.query(`ALTER TABLE "payment_details" DROP COLUMN "isActive"`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" DROP COLUMN "description"`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" DROP COLUMN "referenceId"`);
        await queryRunner.query(`ALTER TABLE "user_profiles" ADD "street" character varying`);
        await queryRunner.query(`ALTER TABLE "auth_providers" ADD "email" character varying`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ADD "billAmount" numeric(10,2)`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ADD "coinsEarned" numeric(10,2)`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ADD "coinsRedeemed" numeric(10,2)`);
        await queryRunner.query(`CREATE TYPE "public"."coin_transactions_status_enum" AS ENUM('PENDING', 'APPROVED', 'REJECTED', 'PROCESSED', 'PAID')`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ADD "status" "public"."coin_transactions_status_enum" NOT NULL DEFAULT 'PENDING'`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ADD "receiptUrl" character varying(500)`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ADD "adminNotes" text`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ADD "processedAt" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "coin_balances" ADD "totalEarned" numeric(10,2) NOT NULL DEFAULT '0'`);
        await queryRunner.query(`ALTER TABLE "coin_balances" ADD "totalRedeemed" numeric(10,2) NOT NULL DEFAULT '0'`);
        await queryRunner.query(`ALTER TABLE "users" ADD "hasWelcomeBonusProcessed" boolean NOT NULL DEFAULT false`);
        await queryRunner.query(`ALTER TABLE "users" ADD "profileId" uuid`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "UQ_b1bda35cdb9a2c1b777f5541d87" UNIQUE ("profileId")`);
        await queryRunner.query(`ALTER TABLE "users" ADD "paymentDetailsId" uuid`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "UQ_f1a0f8df6337745388d514a01a4" UNIQUE ("paymentDetailsId")`);
        await queryRunner.query(`COMMENT ON COLUMN "user_profiles"."id" IS NULL`);
        await queryRunner.query(`ALTER TABLE "user_profiles" DROP COLUMN "gender"`);
        await queryRunner.query(`CREATE TYPE "public"."user_profiles_gender_enum" AS ENUM('MALE', 'FEMALE', 'OTHER', 'PREFER_NOT_TO_SAY')`);
        await queryRunner.query(`ALTER TABLE "user_profiles" ADD "gender" "public"."user_profiles_gender_enum"`);
        await queryRunner.query(`COMMENT ON COLUMN "user_profiles"."userId" IS NULL`);
        await queryRunner.query(`ALTER TABLE "user_profiles" ADD CONSTRAINT "UQ_8481388d6325e752cd4d7e26c6d" UNIQUE ("userId")`);
        await queryRunner.query(`COMMENT ON COLUMN "payment_details"."id" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "payment_details"."mobileNumber" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "payment_details"."userId" IS NULL`);
        await queryRunner.query(`ALTER TABLE "payment_details" ADD CONSTRAINT "UQ_238f94299cde6f8b43db0e3423a" UNIQUE ("userId")`);
        await queryRunner.query(`COMMENT ON COLUMN "auth_providers"."id" IS NULL`);
        await queryRunner.query(`ALTER TYPE "public"."provider_type_enum" RENAME TO "provider_type_enum_old"`);
        await queryRunner.query(`CREATE TYPE "public"."auth_providers_provider_enum" AS ENUM('SMS', 'EMAIL', 'GOOGLE', 'FACEBOOK')`);
        await queryRunner.query(`ALTER TABLE "auth_providers" ALTER COLUMN "provider" TYPE "public"."auth_providers_provider_enum" USING "provider"::"text"::"public"."auth_providers_provider_enum"`);
        await queryRunner.query(`DROP TYPE "public"."provider_type_enum_old"`);
        await queryRunner.query(`COMMENT ON COLUMN "auth_providers"."userId" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "brands"."id" IS NULL`);
        await queryRunner.query(`ALTER TABLE "brands" ALTER COLUMN "categoryId" DROP NOT NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "brands"."categoryId" IS NULL`);
        await queryRunner.query(`ALTER TABLE "brands" ALTER COLUMN "earningPercentage" SET DEFAULT '30'`);
        await queryRunner.query(`ALTER TABLE "brands" ALTER COLUMN "redemptionPercentage" SET DEFAULT '100'`);
        await queryRunner.query(`COMMENT ON COLUMN "brands"."minRedemptionAmount" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "brands"."maxRedemptionAmount" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "brands"."brandwiseMaxCap" IS NULL`);
        await queryRunner.query(`ALTER TABLE "brands" ALTER COLUMN "brandwiseMaxCap" SET DEFAULT '2000'`);
        await queryRunner.query(`ALTER TABLE "brands" ALTER COLUMN "createdAt" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "brands" ALTER COLUMN "updatedAt" SET DEFAULT now()`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_transactions"."id" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_transactions"."userId" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_transactions"."brandId" IS NULL`);
        await queryRunner.query(`ALTER TYPE "public"."coin_transactions_type_enum" RENAME TO "coin_transactions_type_enum_old"`);
        await queryRunner.query(`CREATE TYPE "public"."coin_transactions_type_enum" AS ENUM('EARN', 'REDEEM', 'WELCOME_BONUS', 'ADJUSTMENT')`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ALTER COLUMN "type" TYPE "public"."coin_transactions_type_enum" USING "type"::"text"::"public"."coin_transactions_type_enum"`);
        await queryRunner.query(`DROP TYPE "public"."coin_transactions_type_enum_old"`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_transactions"."transactionId" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_transactions"."billDate" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_transactions"."paymentProcessedAt" IS NULL`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ALTER COLUMN "createdAt" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ALTER COLUMN "updatedAt" SET DEFAULT now()`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_balances"."id" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_balances"."userId" IS NULL`);
        await queryRunner.query(`ALTER TABLE "coin_balances" ALTER COLUMN "lastUpdated" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "coin_balances" ALTER COLUMN "createdAt" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "coin_balances" ALTER COLUMN "updatedAt" SET DEFAULT now()`);
        await queryRunner.query(`COMMENT ON COLUMN "users"."id" IS NULL`);
        await queryRunner.query(`ALTER TYPE "public"."user_status_enum" RENAME TO "user_status_enum_old"`);
        await queryRunner.query(`CREATE TYPE "public"."users_status_enum" AS ENUM('PENDING', 'ACTIVE', 'SUSPENDED', 'DELETED')`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "status" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "status" TYPE "public"."users_status_enum" USING "status"::"text"::"public"."users_status_enum"`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "status" SET DEFAULT 'PENDING'`);
        await queryRunner.query(`DROP TYPE "public"."user_status_enum_old"`);
        await queryRunner.query(`COMMENT ON COLUMN "users"."isEmailVerified" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "users"."passwordHash" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "users"."emailVerificationToken" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "users"."emailVerificationExpiresAt" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "users"."passwordResetToken" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "users"."passwordResetExpiresAt" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "global_config"."id" IS NULL`);
        await queryRunner.query(`ALTER TABLE "global_config" ALTER COLUMN "createdAt" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "global_config" ALTER COLUMN "updatedAt" SET DEFAULT now()`);
        await queryRunner.query(`COMMENT ON COLUMN "otps"."id" IS NULL`);
        await queryRunner.query(`ALTER TYPE "public"."otp_type_enum" RENAME TO "otp_type_enum_old"`);
        await queryRunner.query(`CREATE TYPE "public"."otps_type_enum" AS ENUM('SMS', 'EMAIL')`);
        await queryRunner.query(`ALTER TABLE "otps" ALTER COLUMN "type" TYPE "public"."otps_type_enum" USING "type"::"text"::"public"."otps_type_enum"`);
        await queryRunner.query(`DROP TYPE "public"."otp_type_enum_old"`);
        await queryRunner.query(`ALTER TYPE "public"."otp_status_enum" RENAME TO "otp_status_enum_old"`);
        await queryRunner.query(`CREATE TYPE "public"."otps_status_enum" AS ENUM('PENDING', 'VERIFIED', 'EXPIRED')`);
        await queryRunner.query(`ALTER TABLE "otps" ALTER COLUMN "status" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "otps" ALTER COLUMN "status" TYPE "public"."otps_status_enum" USING "status"::"text"::"public"."otps_status_enum"`);
        await queryRunner.query(`ALTER TABLE "otps" ALTER COLUMN "status" SET DEFAULT 'PENDING'`);
        await queryRunner.query(`DROP TYPE "public"."otp_status_enum_old"`);
        await queryRunner.query(`COMMENT ON COLUMN "brand_categories"."id" IS NULL`);
        await queryRunner.query(`ALTER TABLE "brand_categories" ALTER COLUMN "createdAt" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "brand_categories" ALTER COLUMN "updatedAt" SET DEFAULT now()`);
        await queryRunner.query(`CREATE INDEX "IDX_aa8129c832f5ec21a875f0add2" ON "otps" ("identifier", "type", "status") `);
        await queryRunner.query(`ALTER TABLE "user_profiles" ADD CONSTRAINT "FK_8481388d6325e752cd4d7e26c6d" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "payment_details" ADD CONSTRAINT "FK_238f94299cde6f8b43db0e3423a" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "auth_providers" ADD CONSTRAINT "FK_eb4fd6d0f3ad537effb4cb7505a" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ADD CONSTRAINT "FK_9332e2b867f91fba0642b781af8" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ADD CONSTRAINT "FK_44503460d32a68307ec82ab6feb" FOREIGN KEY ("brandId") REFERENCES "brands"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "coin_balances" ADD CONSTRAINT "FK_41375ba3cf636acd8bfa009ba8e" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "files" ADD CONSTRAINT "FK_7e7425b17f9e707331e9a6c7335" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "FK_b1bda35cdb9a2c1b777f5541d87" FOREIGN KEY ("profileId") REFERENCES "user_profiles"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "FK_f1a0f8df6337745388d514a01a4" FOREIGN KEY ("paymentDetailsId") REFERENCES "payment_details"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "notifications" ADD CONSTRAINT "FK_692a909ee0fa9383e7859f9b406" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "notifications" DROP CONSTRAINT "FK_692a909ee0fa9383e7859f9b406"`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "FK_f1a0f8df6337745388d514a01a4"`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "FK_b1bda35cdb9a2c1b777f5541d87"`);
        await queryRunner.query(`ALTER TABLE "files" DROP CONSTRAINT "FK_7e7425b17f9e707331e9a6c7335"`);
        await queryRunner.query(`ALTER TABLE "coin_balances" DROP CONSTRAINT "FK_41375ba3cf636acd8bfa009ba8e"`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" DROP CONSTRAINT "FK_44503460d32a68307ec82ab6feb"`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" DROP CONSTRAINT "FK_9332e2b867f91fba0642b781af8"`);
        await queryRunner.query(`ALTER TABLE "auth_providers" DROP CONSTRAINT "FK_eb4fd6d0f3ad537effb4cb7505a"`);
        await queryRunner.query(`ALTER TABLE "payment_details" DROP CONSTRAINT "FK_238f94299cde6f8b43db0e3423a"`);
        await queryRunner.query(`ALTER TABLE "user_profiles" DROP CONSTRAINT "FK_8481388d6325e752cd4d7e26c6d"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_aa8129c832f5ec21a875f0add2"`);
        await queryRunner.query(`ALTER TABLE "brand_categories" ALTER COLUMN "updatedAt" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "brand_categories" ALTER COLUMN "createdAt" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`COMMENT ON COLUMN "brand_categories"."id" IS 'PK - Primary Key'`);
        await queryRunner.query(`CREATE TYPE "public"."otp_status_enum_old" AS ENUM('pending', 'verified', 'expired')`);
        await queryRunner.query(`ALTER TABLE "otps" ALTER COLUMN "status" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "otps" ALTER COLUMN "status" TYPE "public"."otp_status_enum_old" USING "status"::"text"::"public"."otp_status_enum_old"`);
        await queryRunner.query(`ALTER TABLE "otps" ALTER COLUMN "status" SET DEFAULT 'pending'`);
        await queryRunner.query(`DROP TYPE "public"."otps_status_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."otp_status_enum_old" RENAME TO "otp_status_enum"`);
        await queryRunner.query(`CREATE TYPE "public"."otp_type_enum_old" AS ENUM('sms', 'email')`);
        await queryRunner.query(`ALTER TABLE "otps" ALTER COLUMN "type" TYPE "public"."otp_type_enum_old" USING "type"::"text"::"public"."otp_type_enum_old"`);
        await queryRunner.query(`DROP TYPE "public"."otps_type_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."otp_type_enum_old" RENAME TO "otp_type_enum"`);
        await queryRunner.query(`COMMENT ON COLUMN "otps"."id" IS 'PK - Primary Key'`);
        await queryRunner.query(`ALTER TABLE "global_config" ALTER COLUMN "updatedAt" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "global_config" ALTER COLUMN "createdAt" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`COMMENT ON COLUMN "global_config"."id" IS 'PK - Primary Key'`);
        await queryRunner.query(`COMMENT ON COLUMN "users"."passwordResetExpiresAt" IS 'Expiry timestamp for password reset token'`);
        await queryRunner.query(`COMMENT ON COLUMN "users"."passwordResetToken" IS 'Token for password reset functionality'`);
        await queryRunner.query(`COMMENT ON COLUMN "users"."emailVerificationExpiresAt" IS 'Expiry timestamp for email verification token'`);
        await queryRunner.query(`COMMENT ON COLUMN "users"."emailVerificationToken" IS 'Token for email verification flow'`);
        await queryRunner.query(`COMMENT ON COLUMN "users"."passwordHash" IS 'Hashed password using bcrypt for email login'`);
        await queryRunner.query(`COMMENT ON COLUMN "users"."isEmailVerified" IS 'Whether email has been verified through OTP or OAuth'`);
        await queryRunner.query(`CREATE TYPE "public"."user_status_enum_old" AS ENUM('pending', 'active', 'suspended', 'deleted')`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "status" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "status" TYPE "public"."user_status_enum_old" USING "status"::"text"::"public"."user_status_enum_old"`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "status" SET DEFAULT 'pending'`);
        await queryRunner.query(`DROP TYPE "public"."users_status_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."user_status_enum_old" RENAME TO "user_status_enum"`);
        await queryRunner.query(`COMMENT ON COLUMN "users"."id" IS 'PK - Primary Key'`);
        await queryRunner.query(`ALTER TABLE "coin_balances" ALTER COLUMN "updatedAt" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "coin_balances" ALTER COLUMN "createdAt" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "coin_balances" ALTER COLUMN "lastUpdated" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_balances"."userId" IS 'FK - References users(id)'`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_balances"."id" IS 'PK - Primary Key'`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ALTER COLUMN "updatedAt" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ALTER COLUMN "createdAt" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_transactions"."paymentProcessedAt" IS 'Payment completion timestamp'`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_transactions"."billDate" IS 'Receipt date for validation'`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_transactions"."transactionId" IS 'Admin payment tracking ID'`);
        await queryRunner.query(`CREATE TYPE "public"."coin_transactions_type_enum_old" AS ENUM('WELCOME_BONUS', 'EARNED', 'REDEEMED', 'EXPIRED', 'ADJUSTMENT')`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ALTER COLUMN "type" TYPE "public"."coin_transactions_type_enum_old" USING "type"::"text"::"public"."coin_transactions_type_enum_old"`);
        await queryRunner.query(`DROP TYPE "public"."coin_transactions_type_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."coin_transactions_type_enum_old" RENAME TO "coin_transactions_type_enum"`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_transactions"."brandId" IS 'FK - References brands(id)'`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_transactions"."userId" IS 'FK - References users(id)'`);
        await queryRunner.query(`COMMENT ON COLUMN "coin_transactions"."id" IS 'PK - Primary Key'`);
        await queryRunner.query(`ALTER TABLE "brands" ALTER COLUMN "updatedAt" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "brands" ALTER COLUMN "createdAt" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "brands" ALTER COLUMN "brandwiseMaxCap" SET DEFAULT '0'`);
        await queryRunner.query(`COMMENT ON COLUMN "brands"."brandwiseMaxCap" IS 'Per-transaction maximum redemption limit (same as maxRedemptionAmount)'`);
        await queryRunner.query(`COMMENT ON COLUMN "brands"."maxRedemptionAmount" IS 'Maximum amount that can be redeemed (same as brandwiseMaxCap)'`);
        await queryRunner.query(`COMMENT ON COLUMN "brands"."minRedemptionAmount" IS 'Minimum amount required for redemption (default: 1)'`);
        await queryRunner.query(`ALTER TABLE "brands" ALTER COLUMN "redemptionPercentage" SET DEFAULT '0'`);
        await queryRunner.query(`ALTER TABLE "brands" ALTER COLUMN "earningPercentage" SET DEFAULT '0'`);
        await queryRunner.query(`COMMENT ON COLUMN "brands"."categoryId" IS 'FK - References brand_categories(id)'`);
        await queryRunner.query(`ALTER TABLE "brands" ALTER COLUMN "categoryId" SET NOT NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "brands"."id" IS 'PK - Primary Key'`);
        await queryRunner.query(`COMMENT ON COLUMN "auth_providers"."userId" IS 'FK - References users(id)'`);
        await queryRunner.query(`CREATE TYPE "public"."provider_type_enum_old" AS ENUM('google', 'facebook', 'apple')`);
        await queryRunner.query(`ALTER TABLE "auth_providers" ALTER COLUMN "provider" TYPE "public"."provider_type_enum_old" USING "provider"::"text"::"public"."provider_type_enum_old"`);
        await queryRunner.query(`DROP TYPE "public"."auth_providers_provider_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."provider_type_enum_old" RENAME TO "provider_type_enum"`);
        await queryRunner.query(`COMMENT ON COLUMN "auth_providers"."id" IS 'PK - Primary Key'`);
        await queryRunner.query(`ALTER TABLE "payment_details" DROP CONSTRAINT "UQ_238f94299cde6f8b43db0e3423a"`);
        await queryRunner.query(`COMMENT ON COLUMN "payment_details"."userId" IS 'FK - References users(id)'`);
        await queryRunner.query(`COMMENT ON COLUMN "payment_details"."mobileNumber" IS 'Mobile number associated with payment method'`);
        await queryRunner.query(`COMMENT ON COLUMN "payment_details"."id" IS 'PK - Primary Key'`);
        await queryRunner.query(`ALTER TABLE "user_profiles" DROP CONSTRAINT "UQ_8481388d6325e752cd4d7e26c6d"`);
        await queryRunner.query(`COMMENT ON COLUMN "user_profiles"."userId" IS 'FK - References users(id)'`);
        await queryRunner.query(`ALTER TABLE "user_profiles" DROP COLUMN "gender"`);
        await queryRunner.query(`DROP TYPE "public"."user_profiles_gender_enum"`);
        await queryRunner.query(`ALTER TABLE "user_profiles" ADD "gender" character varying`);
        await queryRunner.query(`COMMENT ON COLUMN "user_profiles"."id" IS 'PK - Primary Key'`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "UQ_f1a0f8df6337745388d514a01a4"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "paymentDetailsId"`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "UQ_b1bda35cdb9a2c1b777f5541d87"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "profileId"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "hasWelcomeBonusProcessed"`);
        await queryRunner.query(`ALTER TABLE "coin_balances" DROP COLUMN "totalRedeemed"`);
        await queryRunner.query(`ALTER TABLE "coin_balances" DROP COLUMN "totalEarned"`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" DROP COLUMN "processedAt"`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" DROP COLUMN "adminNotes"`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" DROP COLUMN "receiptUrl"`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" DROP COLUMN "status"`);
        await queryRunner.query(`DROP TYPE "public"."coin_transactions_status_enum"`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" DROP COLUMN "coinsRedeemed"`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" DROP COLUMN "coinsEarned"`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" DROP COLUMN "billAmount"`);
        await queryRunner.query(`ALTER TABLE "auth_providers" DROP COLUMN "email"`);
        await queryRunner.query(`ALTER TABLE "user_profiles" DROP COLUMN "street"`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ADD "referenceId" character varying(100)`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ADD "description" text NOT NULL`);
        await queryRunner.query(`ALTER TABLE "payment_details" ADD "isActive" boolean NOT NULL DEFAULT true`);
        await queryRunner.query(`ALTER TABLE "payment_details" ADD "isDefault" boolean NOT NULL DEFAULT false`);
        await queryRunner.query(`ALTER TABLE "payment_details" ADD "walletType" character varying`);
        await queryRunner.query(`ALTER TABLE "payment_details" ADD "cardBrand" character varying`);
        await queryRunner.query(`ALTER TABLE "payment_details" ADD "cardLastFour" character varying`);
        await queryRunner.query(`CREATE TYPE "public"."payment_method_enum" AS ENUM('upi', 'card', 'net_banking', 'wallet')`);
        await queryRunner.query(`ALTER TABLE "payment_details" ADD "preferredMethod" "public"."payment_method_enum"`);
        await queryRunner.query(`ALTER TABLE "user_profiles" ADD "address" character varying`);
        await queryRunner.query(`DROP INDEX "public"."IDX_5340fc241f57310d243e5ab20b"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_21e65af2f4f242d4c85a92aff4"`);
        await queryRunner.query(`DROP TABLE "notifications"`);
        await queryRunner.query(`DROP TABLE "files"`);
        await queryRunner.query(`COMMENT ON TABLE "brand_categories" IS 'Brand classification categories'`);
        await queryRunner.query(`COMMENT ON TABLE "otps" IS 'One-time password verification records'`);
        await queryRunner.query(`COMMENT ON TABLE "global_config" IS 'System-wide configuration settings'`);
        await queryRunner.query(`COMMENT ON TABLE "users" IS 'Core user accounts with authentication details'`);
        await queryRunner.query(`COMMENT ON TABLE "coin_balances" IS 'Current coin balance per user'`);
        await queryRunner.query(`COMMENT ON TABLE "coin_transactions" IS 'All coin earning and redemption transactions'`);
        await queryRunner.query(`COMMENT ON TABLE "brands" IS 'Partner brands with earning/redemption rules'`);
        await queryRunner.query(`COMMENT ON TABLE "auth_providers" IS 'OAuth provider connections for users'`);
        await queryRunner.query(`COMMENT ON TABLE "payment_details" IS 'User payment method preferences'`);
        await queryRunner.query(`COMMENT ON TABLE "user_profiles" IS 'Extended user profile information'`);
        await queryRunner.query(`CREATE INDEX "IDX_otps_identifier_type_status" ON "otps" ("identifier", "type", "status") `);
        await queryRunner.query(`CREATE INDEX "IDX_GLOBAL_CONFIG_CATEGORY" ON "global_config" ("category") `);
        await queryRunner.query(`CREATE INDEX "IDX_GLOBAL_CONFIG_KEY" ON "global_config" ("key") `);
        await queryRunner.query(`CREATE INDEX "IDX_users_email" ON "users" ("email") `);
        await queryRunner.query(`CREATE INDEX "IDX_users_mobileNumber" ON "users" ("mobileNumber") `);
        await queryRunner.query(`CREATE INDEX "IDX_coin_balance_user" ON "coin_balances" ("userId") `);
        await queryRunner.query(`CREATE INDEX "IDX_COIN_BALANCES_LAST_UPDATED" ON "coin_balances" ("lastUpdated") `);
        await queryRunner.query(`CREATE INDEX "IDX_COIN_TRANSACTIONS_PAYMENT_PROCESSED" ON "coin_transactions" ("paymentProcessedAt") `);
        await queryRunner.query(`CREATE INDEX "IDX_COIN_TRANSACTIONS_BILL_DATE" ON "coin_transactions" ("billDate") `);
        await queryRunner.query(`CREATE INDEX "IDX_COIN_TRANSACTIONS_TRANSACTION_ID" ON "coin_transactions" ("transactionId") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "UQ_coin_transactions_user_welcome_bonus" ON "coin_transactions" ("userId", "type") WHERE (type = 'WELCOME_BONUS'::coin_transactions_type_enum)`);
        await queryRunner.query(`CREATE INDEX "IDX_coin_transactions_brand" ON "coin_transactions" ("brandId") `);
        await queryRunner.query(`CREATE INDEX "IDX_coin_transactions_user_created" ON "coin_transactions" ("userId", "createdAt") `);
        await queryRunner.query(`CREATE INDEX "IDX_coin_transactions_user_type" ON "coin_transactions" ("userId", "type") `);
        await queryRunner.query(`CREATE INDEX "IDX_COIN_TRANSACTIONS_USER_TYPE" ON "coin_transactions" ("userId", "type") `);
        await queryRunner.query(`CREATE INDEX "IDX_COIN_TRANSACTIONS_CREATED_AT" ON "coin_transactions" ("createdAt") `);
        await queryRunner.query(`CREATE INDEX "IDX_COIN_TRANSACTIONS_BRAND_ID" ON "coin_transactions" ("brandId") `);
        await queryRunner.query(`CREATE INDEX "IDX_COIN_TRANSACTIONS_TYPE" ON "coin_transactions" ("type") `);
        await queryRunner.query(`CREATE INDEX "IDX_COIN_TRANSACTIONS_USER_ID" ON "coin_transactions" ("userId") `);
        await queryRunner.query(`CREATE INDEX "IDX_BRANDS_BRANDWISE_MAX_CAP" ON "brands" ("brandwiseMaxCap") `);
        await queryRunner.query(`CREATE INDEX "IDX_brands_active" ON "brands" ("isActive") `);
        await queryRunner.query(`CREATE INDEX "IDX_brands_category_active" ON "brands" ("categoryId", "isActive") `);
        await queryRunner.query(`CREATE INDEX "IDX_BRANDS_IS_ACTIVE" ON "brands" ("isActive") `);
        await queryRunner.query(`CREATE INDEX "IDX_BRANDS_CATEGORY_ID" ON "brands" ("categoryId") `);
        await queryRunner.query(`CREATE INDEX "IDX_auth_providers_provider" ON "auth_providers" ("provider") `);
        await queryRunner.query(`ALTER TABLE "coin_balances" ADD CONSTRAINT "FK_41375ba3cf636acd8bfa009ba8e" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ADD CONSTRAINT "FK_44503460d32a68307ec82ab6feb" FOREIGN KEY ("brandId") REFERENCES "brands"("id") ON DELETE SET NULL ON UPDATE CASCADE`);
        await queryRunner.query(`ALTER TABLE "coin_transactions" ADD CONSTRAINT "FK_9332e2b867f91fba0642b781af8" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE`);
        await queryRunner.query(`ALTER TABLE "brands" ADD CONSTRAINT "FK_b209d7ccd90ae0ca1605794a0d5" FOREIGN KEY ("categoryId") REFERENCES "brand_categories"("id") ON DELETE RESTRICT ON UPDATE CASCADE`);
        await queryRunner.query(`ALTER TABLE "auth_providers" ADD CONSTRAINT "FK_auth_providers_userId" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "payment_details" ADD CONSTRAINT "FK_payment_details_userId" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "user_profiles" ADD CONSTRAINT "FK_user_profiles_userId" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
    }

}
